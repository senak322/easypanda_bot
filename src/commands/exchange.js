import { Markup } from "telegraf";
import { giveExchangeMenu } from "../keyboards/giveExchangeMenu.js";
import { receiveExchangeMenu } from "../keyboards/receiveExchangeMenu.js";
import { config } from "../../config.js";
import { getExchangeRate } from "../utils/api.js";
import { banksMenu } from "../keyboards/banksMenu.js";

const {
  backBtn,
  mainMenuBtn,
  banksRub,
  banksCny,
  banksUah,
  banksRubRecieve,
  banksCnyRecieve,
  banksUahRecieve,
} = config;

export const exchangeCommand = (bot) => {
  bot.hears("üí∏ –ù–æ–≤—ã–π –æ–±–º–µ–Ω", (ctx) => {
    ctx.session.state = "selectingSendCurrency";
    ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ üëá", giveExchangeMenu);
  });

  bot.hears(["üá∑üá∫ RUB", "üá®üá≥ CNY", "üá∫üá¶ UAH"], (ctx) => {
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.state = "selectingReceiveCurrency";
    ctx.session.sendCurrency = ctx.message.text;

    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è
    let menu;
    switch (ctx.session.sendCurrency) {
      case "üá∑üá∫ RUB":
      case "üá∫üá¶ UAH":
        menu = receiveExchangeMenu(["–ü–æ–ª—É—á–∏—Ç—å üá®üá≥ CNY"]); // –¢–æ–ª—å–∫–æ CNY
        break;
      case "üá®üá≥ CNY":
        menu = receiveExchangeMenu(["–ü–æ–ª—É—á–∏—Ç—å üá∑üá∫ RUB", "–ü–æ–ª—É—á–∏—Ç—å üá∫üá¶ UAH"]); // RUB –∏ UAH
        break;
    }
    ctx.session.menuReceiveCurrency = menu;
    ctx.reply(
      `–í—ã –æ—Ç–¥–∞—ë—Ç–µ ${ctx.session.sendCurrency}
–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –ü–æ–ª—É—á–µ–Ω–∏—è üëá`,
      ctx.session.menuReceiveCurrency
    );
  });

  bot.hears(
    ["–ü–æ–ª—É—á–∏—Ç—å üá®üá≥ CNY", "–ü–æ–ª—É—á–∏—Ç—å üá∑üá∫ RUB", "–ü–æ–ª—É—á–∏—Ç—å üá∫üá¶ UAH"],
    (ctx) => {
      ctx.session.state = "enteringAmount";
      ctx.session.receiveCurrency = ctx.message.text;

      // –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –ø–æ–ª—É—á–µ–Ω–∏—è
      let limitFrom = 0;
      let limitTo = 0;
      let currencyName = "";
      console.log(ctx.session.sendCurrency);
      console.log(ctx.session.receiveCurrency);
      switch (ctx.session.receiveCurrency) {
        case "–ü–æ–ª—É—á–∏—Ç—å üá∑üá∫ RUB":
          if (ctx.session.sendCurrency === "üá®üá≥ CNY") {
            limitFrom = 100;
            limitTo = 25000;
            currencyName = "üá∑üá∫ RUB";
          }
          break;
        case "–ü–æ–ª—É—á–∏—Ç—å üá∫üá¶ UAH":
          if (ctx.session.sendCurrency === "üá®üá≥ CNY") {
            limitFrom = 100;
            limitTo = 25000;
            currencyName = "üá∫üá¶ UAH";
          }
          break;
        case "–ü–æ–ª—É—á–∏—Ç—å üá®üá≥ CNY":
          if (ctx.session.sendCurrency === "üá∑üá∫ RUB") {
            limitFrom = 1000;
            limitTo = 300000;
            currencyName = "üá®üá≥ CNY";
          }
          if (ctx.session.sendCurrency === "üá∫üá¶ UAH") {
            limitFrom = 500;
            limitTo = 50000;
            currencyName = "üá®üá≥ CNY";
          }
          break;
      }
      ctx.session.currencyName = currencyName;
      ctx.session.limitFrom = limitFrom;
      ctx.session.limitTo = limitTo;
      ctx.reply(
        `‚úçÔ∏è –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å—É–º–º—É, –≤ ${ctx.session.sendCurrency} –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ–±–º–µ–Ω—è—Ç—å –æ—Ç ${ctx.session.limitFrom} –¥–æ ${ctx.session.limitTo} 
–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—É–º–º—É –≤ ${ctx.session.currencyName} –∂–º–∏ ¬´–£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –≤ ${ctx.session.currencyName}¬ª`,
        Markup.keyboard([
          [`–£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –≤ ${ctx.session.currencyName}`],
          [mainMenuBtn, backBtn],
        ]).resize()
      );
    }
  );

  bot.hears(
    [
      "üü¢–°–±–µ—Ä",
      "üü°–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω",
      "üîπAliPay",
      "üí¨WeChat",
      "üè¶–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫",
      "‚¨õÔ∏è–ú–æ–Ω–æ–ë–∞–Ω–∫",
    ],
    (ctx) => {
      if (ctx.session.state === "chooseSendBank") {
        const { recieveBanks, sendCard } = chooseBankToRecieve(ctx);
        ctx.session.sendCard = sendCard;
        ctx.session.sendBank = ctx.message.text;
        ctx.reply(
          `–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –≤ ${ctx.session.currencyName}`,
          Markup.keyboard([recieveBanks, [mainMenuBtn, backBtn]]).resize()
        );
        ctx.session.state = "chooseRecieveBank";
      }
    }
  );

  bot.hears(
    [
      "üü¢Sber",
      "üü°Raiffeisen",
      "üî∑AliPay",
      "üí≠WeChat",
      "üè´PrivatBank",
      "‚óæÔ∏èMonoBank",
    ],
    (ctx) => {
      if (ctx.session.state === "chooseRecieveBank") {
        if (ctx.session.currencyName === "üá®üá≥ CNY") {
          if (ctx.message.text === "üî∑AliPay") {
            ctx.reply(
              `‚úçÔ∏è –ù–∞–ø–∏—à–∏ –∞–∫–∫–∞—É–Ω—Ç üî∑Alipay –≤ —Ñ–æ—Ä–º–∞—Ç–µ
12345678 (–Ω–æ–º–µ—Ä üî∑Alipay)
–ò–ª–∏
example@live.cn (–ø–æ—á—Ç–∞ üî∑Alipay)
            
–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—åüßæ—Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç QR –∫–æ–¥–∞ –∫–æ—à–µ–ª—å–∫–∞ —Å—é–¥–∞ –≤ —á–∞—Çüëá`,
              Markup.keyboard([mainMenuBtn]).resize()
            );
            ctx.session.state = "chooseRecieveData";
          }
          if (ctx.message.text === "üí≠WeChat") {
            ctx.reply(
              "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å QR-code –Ω–∞ –æ–ø–ª–∞—Ç—É üí¨ WeChat —Å—é–¥–∞ –≤ —á–∞—Çüëá",
              Markup.keyboard([mainMenuBtn]).resize()
            );
            ctx.session.state = "chooseRecieveData";
          }
        } else if (
          ctx.session.currencyName === "üá∑üá∫ RUB" ||
          ctx.session.currencyName === "üá∫üá¶ UAH"
        ) {
          ctx.reply(
            `‚úçÔ∏è –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä üí≥–∫–∞—Ä—Ç—ã ${
              ctx.session.currencyName === "üá∑üá∫ RUB" ? "üá∑üá∫ RUB" : "üá∫üá¶ UAH"
            } –≤ —Ñ–æ—Ä–º–∞—Ç–µ

2202123456781234567 –∏–ª–∏ 5320123456781234`,
            Markup.keyboard([mainMenuBtn]).resize()
          );
          ctx.session.state = "chooseRecieveData";
        }
      }
      ctx.session.recieveBank = ctx.message.text;
    }
  );

  bot.on("text", async (ctx) => {
    let limitToRecieve;
    let limitFromRecieve;

    if (ctx.session.state === "enteringAmount") {
      const rate = await getExchangeRate(ctx);
      if (ctx.message.text === backBtn) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ–±—ã –ø–æ–∑–≤–æ–ª–∏—Ç—å middleware –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ
        return;
      }
      if (ctx.message.text === `–£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –≤ ${ctx.session.currencyName}`) {
        // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
        ctx.session.state = "enteringReceiveAmount";
        if (ctx.session.currencyName === "üá®üá≥ CNY") {
          limitFromRecieve = 100;
          limitToRecieve = 25000;
        }
        if (ctx.session.currencyName === "üá∑üá∫ RUB") {
          limitFromRecieve = 1000;
          limitToRecieve = 300000;
        }
        if (ctx.session.currencyName === "üá∫üá¶ UAH") {
          limitFromRecieve = 500;
          limitToRecieve = 50000;
        }
        ctx.session.limitFromRecieve = limitFromRecieve;
        ctx.session.limitToRecieve = limitToRecieve;
        ctx.reply(
          `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å
–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –æ—Ç ${ctx.session.limitFromRecieve} –¥–æ ${ctx.session.limitToRecieve} –≤ ${ctx.session.currencyName}`,
          Markup.keyboard([
            [`–£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –≤ ${ctx.session.sendCurrency}`],
            [mainMenuBtn, backBtn],
          ]).resize()
        );
        // ...
      } else if (
        !isNaN(ctx.message.text) &&
        isWithinLimits(
          ctx.message.text,
          ctx.session.limitFrom,
          ctx.session.limitTo
        )
      ) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É
        // –î–∞–ª–µ–µ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–º–µ–Ω–∞
        ctx.session.howToSend = ctx.message.text;
        const howToRecieve = getExchangeFormula(ctx, rate);
        console.log(howToRecieve);
        ctx.session.howToRecieve = howToRecieve;
        ctx.session.state = "chooseSendBank";
        ctx.reply(
          `–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ ${ctx.session.howToSend} ${ctx.session.sendCurrency}
–ö –ø–æ–ª—É—á–µ–Ω–∏—é ${howToRecieve} ${ctx.session.currencyName}
–í—ã–±–µ—Ä–∏—Ç–µ —Å –∫–∞–∫–æ–≥–æ –±–∞–Ω–∫–∞ –í–∞–º —É–¥–æ–±–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ${ctx.session.sendCurrency} üëá`,
          banksMenu(ctx)
        );
        
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        ctx.reply(
          `‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç ${
            ctx.session.state === "enteringAmount"
              ? ctx.session.limitFrom
              : ctx.session.limitFromRecieve
          } –¥–æ ${
            ctx.session.state === "enteringAmount"
              ? ctx.session.limitTo
              : ctx.session.limitToRecieve
          }
`
        );
      }
    } else if (ctx.session.state === "enteringReceiveAmount") {
      const rate = await getExchangeRate(ctx);
      if (!isNaN(rate) && !isNaN(parseFloat(ctx.message.text))) {
        const howToSend = getExchangeFormula(ctx, rate);
        ctx.session.howToSend = howToSend;
        ctx.session.howToRecieve = ctx.message.text;
        ctx.session.state = "chooseSendBank";
        ctx.reply(
          `–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ${ctx.session.howToRecieve} ${ctx.session.currencyName} –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ${howToSend} ${ctx.session.sendCurrency}–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–π –±–∞–Ω–∫ —É–¥–æ–±–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ${ctx.session.sendCurrency} üëá`,
          banksMenu(ctx)
        );
      } else if (
        ctx.message.text === `–£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –≤ ${ctx.session.sendCurrency}`
      ) {
        ctx.session.state = "enteringAmount";
        ctx.reply(
          `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç ${ctx.session.limitFrom} –¥–æ ${ctx.session.limitTo} –≤ ${ctx.session.sendCurrency}`,
          Markup.keyboard([
            [`–£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –≤ ${ctx.session.currencyName}`],
            [mainMenuBtn, backBtn],
          ]).resize()
        );
      }
    }
    if (ctx.session.state === "chooseRecieveData") {
      ctx.session.ownerData = ctx.message.text;
      ctx
        .reply(
          `‚úçÔ∏è –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ üë§–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ ${ctx.session.recieveBank}, –≤ —Ñ–æ—Ä–º–∞—Ç–µ IVANOV IVAN –∏–ª–∏ –Ω–∞ —è–∑—ã–∫–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ–ª—É—á–µ–Ω–∏—è`,
          Markup.keyboard([mainMenuBtn]).resize()
        )
        
      ctx.session.state = "chooseRecieveDataOwner";
    }
    if (ctx.session.state === "chooseRecieveDataOwner") {
      if (isNaN(ctx.message.text)) {
        ctx.session.ownerName = ctx.message.text;
        ctx
          .reply(
            `üïµÔ∏è‚Äç‚ôÇÔ∏è–ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –≤—Å–µ –¥–µ–ª–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ!
–î–µ—Ç–∞–ª–∏ –æ–±–º–µ–Ω–∞:
‚û°Ô∏è–û—Ç–¥–∞–µ—à—å ${ctx.session.howToSend} ${ctx.session.sendCurrency} –Ω–∞ ${ctx.session.sendBank}  
‚¨ÖÔ∏è –ü–æ–ª—É—á–∞–µ—à—å ${ctx.session.howToRecieve} ${ctx.session.currencyName} –Ω–∞ ${ctx.session.recieveBank}  

–ü–æ–ª—É—á–∞—Ç–µ–ª—å:
${ctx.session.recieveBank}: ${ctx.session.ownerData}  
üë§–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞: ${ctx.session.ownerName}  
            `,
            Markup.keyboard(["‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ, —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É!", mainMenuBtn]).resize()
          )
          
        ctx.session.state = "chooseRecieveDataOwner";
      }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
  });

  function isWithinLimits(amount, min, max) {
    return amount >= min && amount <= max;
  }

  const howMuchComission = (ctx, rate) => {
    let comission = 0;
    console.log(ctx.message.text);
    const amount =
      ctx.session.state === "enteringAmount"
        ? ctx.message.text
        : ctx.session.state === "enteringReceiveAmount"
        ? ctx.message.text / rate
        : 0;
    if (0 >= ctx.session.amount) {
      ctx.reply(
        `‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç ${
          ctx.session.state === "enteringAmount"
            ? ctx.session.limitFrom
            : ctx.session.limitFromRecieve
        } –¥–æ ${
          ctx.session.state === "enteringAmount"
            ? ctx.session.limitTo
            : ctx.session.limitToRecieve
        }`
      );
      return;
    }
    if (ctx.session.sendCurrency === "üá∑üá∫ RUB") {
      if (0 < amount && amount < 5000) {
        comission = 0.15;
      } else if (5000 <= amount && amount < 50000) {
        comission = 0.1;
      } else if (50000 <= amount && amount <= 300000) {
        comission = 0.07;
      }
    }
    if (ctx.session.sendCurrency === "üá®üá≥ CNY") {
      if (0 < amount && amount < 3500) {
        comission = 0.08;
      } else if (3500 <= amount && amount < 10000) {
        comission = 0.06;
      } else if (10000 <= amount && amount <= 25000) {
        comission = 0.04;
      }
    }
    if (ctx.session.sendCurrency === "üá∫üá¶ UAH") {
      if (0 < amount && amount < 2000) {
        comission = 0.17;
      } else if (2000 <= amount && amount < 20000) {
        comission = 0.11;
      } else if (20000 <= amount && amount <= 50000) {
        comission = 0.1;
      }
    }

    return comission;
  };

  function getExchangeFormula(ctx, rate) {
    let receiveSum = 0;
    // let desiredReceiveAmount = 0
    if (ctx.session.state === "enteringAmount") {
      if (ctx.session.sendCurrency === "üá∑üá∫ RUB" || "üá∫üá¶ UAH") {
        const initialReceiveSum = rate * ctx.message.text;
        receiveSum = Math.floor(
          initialReceiveSum - initialReceiveSum * howMuchComission(ctx, rate)
        );
        return receiveSum;
      } else if (ctx.session.sendCurrency === "üá®üá≥ CNY") {
        const initialReceiveSum = rate * ctx.message.text;
        receiveSum = Math.floor(
          initialReceiveSum + initialReceiveSum * howMuchComission(ctx, rate)
        );
        return receiveSum;
      }
    } else if (ctx.session.state === "enteringReceiveAmount") {
      const comissionRate = howMuchComission(ctx, rate);
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
      receiveSum = Math.floor(ctx.message.text / (rate * (1 - comissionRate)));
      return receiveSum;
    }
  }

  function chooseBankToRecieve(ctx) {
    let sendCard = 0;
    let recieveBanks =
      ctx.session.currencyName === "üá®üá≥ CNY"
        ? banksCnyRecieve
        : ctx.session.currencyName === "üá∑üá∫ RUB"
        ? banksRubRecieve
        : ctx.session.currencyName === "üá∫üá¶ UAH"
        ? banksUahRecieve
        : 0;

    if (ctx.message.text === "üü¢–°–±–µ—Ä") {
      sendCard = 2202206296854099;
    } else if (ctx.message.text === "üü°–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω") {
      sendCard = 2000000000000009;
    } else if (ctx.message.text === "üîπAliPay") {
      sendCard = 2000000000000008;
    } else if (ctx.message.text === "üí¨WeChat") {
      sendCard = 2000000000000007;
    } else if (ctx.message.text === "üè¶–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫") {
      sendCard = 2000000000000006;
    } else if (ctx.message.text === "‚¨õÔ∏è–ú–æ–Ω–æ–ë–∞–Ω–∫") {
      sendCard = 2000000000000005;
    }
    return { sendCard, recieveBanks };
  }
};
